shiny::runApp()
runApp()
runApp()
library(shiny)
library(tree)
library(RColorBrewer)
# Load the iris data set
data(iris)
# Set seed to make randomness reproducable
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes <- sample(
x = 1:150,
size = 100)
# Create training set from indexes
train <- iris[indexes, ]
# Create test set from remaining indexes
test <- iris[-indexes, ]
# Train tree model
treeModel <- tree(
formula = Species ~ .,
data = train)
# Create a color palette
palette <- brewer.pal(3, "Set2")
# Create the server function
server <- function(input, output) {
output$text = renderText({
# Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
# Make prediction
prediction = predict(
object = treeModel,
newdata = predictors,
type = "class")
# Create prediction text
paste(
"The predicted species is ",
as.character(prediction))
})
output$plot = renderPlot({
# Create a scatterplot colored by species
plot(
x = iris$Petal.Length,
y = iris$Petal.Width,
pch = 19,
col = palette[as.numeric(iris$Species)],
main = "Iris Petal Length vs. Width",
xlab = "Petal Length (cm)",
ylab = "Petal Width (cm)")
# Plot the desicion boundaries
partition.tree(
treeModel,
label = "Species",
add = TRUE)
# Draw predictor on plot
points(
x = input$petal.length,
y = input$petal.width,
col = "red",
pch = 4,
cex = 2,
lwd = 2)
})
}
View(server)
View(server)
runApp()
runApp()
# Load the iris data set
data(iris)
# Set seed to make randomness reproducable
set.seed(42)
# Randomly sample 100 of 150 row indexes
indexes <- sample(
x = 1:150,
size = 100)
# Create training set from indexes
train <- iris[indexes, ]
# Create test set from remaining indexes
test <- iris[-indexes, ]
# Train tree model
treeModel <- tree(
formula = Species ~ .,
data = train)
# Create a color palette
palette <- brewer.pal(3, "Set2")
# Create predictors
predictors <- data.frame(
Petal.Length = input$petal.length,
Petal.Width = input$petal.width,
Sepal.Length = 0,
Sepal.Width = 0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("matthewrenze")
library(slidifyLibraries)
author("matthewrenze")
install_github('slidify', 'ramnathv')
install.packages("yaml")
install.packages("yaml")
install_github('ramnathv/slidify')
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidifyLibraries)
library(slidify)
author("matthewrenze")
